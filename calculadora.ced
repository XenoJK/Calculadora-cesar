
  R0: Operando 1, 
  R1: Operando 2, R2: Operador (ASCII)
  R3: Resultado, 
  R4: Auxiliar/Contador, R5: Linkage Register (RTS)

ORG 0 ; O código principal sempre começa no endereço 0

INICIO:
    
    CLR R0
    CLR R1
    CLR R2
    CLR R3
    CLR R4

    ; 2. SIMULACAO DE ENTRADA 
    MOV #10, R0   ; Operando 1 = 10
    MOV #5, R1    ; Operando 2 = 5
    MOV #45, R2   ; Operador = 43 (ASCII de '+')
    ; NOTA: Use #45 p/ SUB, #42 p/ MULT, #47 p/ DIV
    
    ; --- VERIFICACAO DO OPERADOR (ASCII) ---
    
    CMP R2, #43       ; Verifica SOMA (ASCII '+')
    BEQ CHAMA_SOMA
    
    CMP R2, #45       ; Verifica SUBTRACAO (ASCII '-')
    BEQ CHAMA_SUB
    
    CMP R2, #42       ; Verifica MULTIPLICACAO (ASCII '*')
    BEQ CHAMA_MULT
    
    CMP R2, #47       ; Verifica DIVISAO (ASCII '/')
    BEQ CHAMA_DIVIS
    
    JMP ERRO          ; Operação não reconhecida

; --- CHAMADAS DAS SUB-ROTINAS (JSR R5, address) ---
CHAMA_SOMA:
    JSR R5, SOMA_FUNC
    JMP EXIBIR_RESULTADO

CHAMA_SUB:
    JSR R5, SUB_FUNC
    JMP EXIBIR_RESULTADO

CHAMA_MULT:
    JSR R5, MULT_FUNC
    JMP EXIBIR_RESULTADO

CHAMA_DIVIS:
    JSR R5, DIVIS_FUNC
    JMP EXIBIR_RESULTADO


; --- SUB-ROTINAS DE OPERACAO ---
SOMA_FUNC:
    MOV R0, R3   ; R3 = R0
    ADD R1, R3   ; R3 = R3 + R1
    RTS R5       ; Retorna
    
SUB_FUNC:
    MOV R0, R3   ; R3 = R0
    SUB R1, R3   ; R3 = R3 - R1
    RTS R5

MULT_FUNC:
    ; *** Multiplicacao Manual (R3 = R0 * R1) ***
    CLR R3           ; R3 = 0 (Resultado)
    MOV R1, R4       ; R4 = Contador (Operando 2)
    MULT_LOOP:
        CMP R4, #0
        BEQ MULT_END ; Se R4 == 0, termina
        ADD R0, R3   ; R3 = R3 + R0
        DEC R4       ; R4--
        BR MULT_LOOP ; Salto incondicional
    MULT_END:
        RTS R5

DIVIS_FUNC:
    ; *** Divisao Manual (R3 = R0 / R1) ***
    CLR R3           ; R3 = 0 (Quociente)
    MOV R0, R4       ; R4 = Dividendo
    DIV_LOOP:
        CMP R4, R1
        BLE DIV_END  ; Se R4 <= R1, termina
        
        SUB R1, R4   ; R4 = R4 - R1 (Subtrai o divisor do dividendo)
        INC R3       ; R3++ (Incrementa Quociente)
        BR DIV_LOOP
    DIV_END:
        RTS R5


; --- EXIBICAO, ERRO E FIM ---
EXIBIR_RESULTADO:
    JSR R5, EXIBIR_FUNC
    JMP FIM

ERRO:
    MOV #69, R3     ; ASCII de 'E' (Erro)
    MOV R3, #65500  ; Envia para o visor
    JMP FIM

EXIBIR_FUNC:
    ; Converte o resultado de R3 (0-9) para ASCII e exibe
    CMP R3, #10
    BGE RET_EXIBIR   ; Se R3 >= 10, retorna (Simplificação para 1 dígito)

CONVERTE_ASCII:
    ADD #48, R3     ; R3 = R3 + 48 (Código ASCII do '0')
    MOV R3, #65500  ; Envia para o visor
    
RET_EXIBIR:
    RTS R5

FIM:
    HLT